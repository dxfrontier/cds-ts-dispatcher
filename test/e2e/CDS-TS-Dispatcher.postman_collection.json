{
	"info": {
		"_postman_id": "94d1e670-74b9-48eb-818c-a86b56190c85",
		"name": "CDS-TS-Dispatcher",
		"description": "`SAP CAP` `NodeJS-based project` using TypesScript decorators for rapid development.\n\nThe goal of SAP CAP Nodejs Decorators is to significantly reduce the boilerplate code required to implement JS handlers provided by the SAP CAP framework.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1369492"
	},
	"item": [
		{
			"name": "Events",
			"item": [
				{
					"name": "Active entity",
					"item": [
						{
							"name": "After",
							"item": [
								{
									"name": "@AfterCreate",
									"item": [
										{
											"name": "Validate currency_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ID\": 542,\n    \"title\": \"Mysterious Journey\",\n    \"descr\": \"A thrilling adventure awaits in the mysterious journey of a lifetime.\",\n    \"author_ID\": 101,\n    \"genre_ID\": 11,\n    \"stock\": 53,\n    \"price\": 99.11,\n    \"currency_code\": \"\" // no currency then the validation should be triggered and 400 code error should be returned\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@AfterRead",
									"item": [
										{
											"name": "Entity set : Validate title to contain 10 % discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Enity set : Title contains \\\"10 % discount!\\\"\", function () {",
															"    const response = pm.response.json();",
															"    response.value.forEach((item) => {",
															"        pm.expect(item.title).to.include(\"10 % discount!\")",
															"    })",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Single object : Validate title to contain 10 % discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response is a single object and not an array\", function () {",
															"    pm.expect(pm.response.json()).to.be.an('object').and.not.an('array');",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}(ID=252)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}(ID=252)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@AfterUpdate",
									"item": [
										{
											"name": "Add to property \"descr\" the value \"No description\"",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Programatically updated the 'title' and should contain 'Dracula'\", function () {",
															"    const title = pm.response.json().title;",
															"    pm.expect(title).to.contain('Dracula')",
															"});",
															"",
															"pm.test(\"The 'descr' property should contain 'No description'\", function () {",
															"    const descr = pm.response.json().descr;",
															"    pm.expect(descr).to.equal('No description');",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"descr\": \"No description\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}(ID=201)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}(ID=201)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@AfterDelete",
									"item": [
										{
											"name": "Delete an item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"pm.test(\"Delete an item returns text 'Item deleted : true'\", function () {",
															"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
															"",
															"     headers.forEach((header) => {",
															"        if(header.message === 'Item deleted : true') {",
															"            pm.expect(header.message).to.contains('Item deleted : true')",
															"        }",
															"    })",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}(ID=201)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}(ID=201)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@AfterAll",
									"item": [
										{
											"name": "Custom header will be added on all requests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"CustomHeader is present\", function () {",
															"    pm.response.to.have.header(\"CustomHeader\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "The `After` phase is only started after the `On` phase is completed successfully. Handlers are therefore guaranteed to have access to the result of the event processing. This phase is useful for post-processing of the return value of the event or triggering side-effects. A handler in this phase can also still abort the event processing by throwing an exception. No further handlers of the `After` phase are called in this case."
						},
						{
							"name": "Before",
							"item": [
								{
									"name": "@BeforeCreate",
									"item": [
										{
											"name": "POST Object should be validated",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body has error with code, message, and numericSeverity properties\", function () {",
															"    var responseBody = pm.response.json();",
															"    pm.expect(responseBody).to.have.property('error');",
															"    pm.expect(responseBody.error).to.have.property('code', '400');",
															"    pm.expect(responseBody.error).to.have.property('message').that.is.a('string').and.to.have.length.greaterThan(10);",
															"    pm.expect(responseBody.error).to.have.property('@Common.numericSeverity', 4);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ID\": 23,\n    \"reviewer_ID\": 1,\n    \"book_ID\": 203,\n    \"rating\": 2,\n    \"comment\": \"Message must be larger than 10\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{reviewsEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{reviewsEntity}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@BeforeRead",
									"item": [
										{
											"name": "Entity set : Reading the Reviews gets status 400",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Contains text 'Before read executed'\", function () {",
															"    const response = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(response[0].message).to.contains('Before read executed')",
															"});",
															"",
															"pm.test(\"Body response is an array\", function () {",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('value').that.is.an('array');",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{reviewsEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{reviewsEntity}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Single item : Reading the Reviews gets status 400",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Contains text 'Before read executed'\", function () {",
															"    const response = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(response[0].message).to.contains('Before read executed')",
															"});",
															"",
															"pm.test(\"Response body is an object and not an array\", function () {",
															"    pm.expect(pm.response.json()).to.be.an('object').and.not.an('array');",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{reviewsEntity}}(ID=4)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{reviewsEntity}}(ID=4)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@BeforeUpdate",
									"item": [
										{
											"name": "Update property \"comment\" with a new value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Text message should contain 'Message must be larger than 10'\", function () {",
															"    const message = pm.response.json().error.message",
															"    pm.expect(message).to.contain('Message must be larger than 10')",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"comment\": \"Must be largen than 10 chars\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{reviewsEntity}}(ID=6)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{reviewsEntity}}(ID=6)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@BeforeDelete",
									"item": [
										{
											"name": "Delete an item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"pm.test(\"Delete an item return text 'Item deleted'\", function () {",
															"    const response = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(response[0].message).to.contains('Item deleted')",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{reviewsEntity}}(ID=4)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{reviewsEntity}}(ID=4)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@BeforeAll",
									"item": [
										{
											"name": "Entity set : Reading the Reviews gets status 400",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Contains text 'Before read executed'\", function () {",
															"    const response = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(response[0].message).to.contains('Before read executed')",
															"});",
															"",
															"pm.test(\"Body response is an array\", function () {",
															"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('value').that.is.an('array');",
															"});",
															"",
															"pm.test(\"CustomHeader is present\", function () {",
															"    pm.response.to.have.header(\"CustomHeader\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{reviewsEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{reviewsEntity}}"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "The `Before` phase is the first phase of the event processing. This phase is intended for filtering, validation, and other types of preprocessing of the incoming parameters of an event. There can be an arbitrary number of `Before` handlers per event.\n\nThe processing of the `Before` phase is completed when one of the following conditions applies:\n\n- All registered `Before` handlers were successfully called. Execution continues with the `On` phase.\n    \n- A handler [completes the event processing](https://cap.cloud.sap/docs/java/provisioning-api#eventcompletion) by setting a return value or setting the state of an event to completed. In this case, any remaining registered `Before` and `On` handlers are skipped and execution continues with the `After` phase.\n    \n- A handler throws an exception. In this case, event processing is terminated immediately."
						},
						{
							"name": "On",
							"item": [
								{
									"name": "@OnCreate",
									"item": [
										{
											"name": "On create a new Book statistics",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"pm.test(\"Contains text 'On Create executed'\", function () {",
															"    const response = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(response[0].message).to.contains('On Create executed');",
															"});",
															"",
															"pm.test(\"Response body is a single object and not an array\", function () {",
															"    const responseBody = pm.response.json();",
															"    pm.expect(responseBody).to.be.an('object').and.not.to.be.an('array');",
															"});",
															"",
															"pm.test(\"Verify the specific content of the response body \", function () {",
															"    const expectedResponse = {",
															"        \"@odata.context\": \"$metadata#BookStats/$entity\",",
															"        \"ID\": 3,",
															"        \"views\": 234,",
															"        \"averageRating\": 222.33,",
															"        \"book_ID\": 203",
															"    };",
															"    const responseBody = pm.response.json();",
															"    Object.keys(expectedResponse).forEach(key => {",
															"        pm.expect(responseBody).to.have.property(key);",
															"        pm.expect(responseBody[key]).to.eql(expectedResponse[key]);",
															"    });",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ID\": 3,\n    \"views\": 234,\n    \"averageRating\": 222.33,\n    \"book_ID\": 203\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{bookStatsEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{bookStatsEntity}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnRead",
									"item": [
										{
											"name": "On read book statistics entity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"1 item should have 'views : 444233'\", function () {",
															"    const response = pm.response.json();",
															"",
															"    response.value.forEach((item) => {",
															"        if(item.views === 444233) {",
															"            pm.expect(item.views.toString()).to.contains(\"444233\");",
															"        }",
															"    })",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{bookStatsEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{bookStatsEntity}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On read book statistics single entity instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204, 201, 200]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{bookStatsEntity}}?$filter=ID eq 1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{bookStatsEntity}}"
													],
													"query": [
														{
															"key": "$filter",
															"value": "ID eq 1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnUpdate",
									"item": [
										{
											"name": "On update single entity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"   pm.expect(pm.response.code).to.be.oneOf([204, 201, 200]);",
															"});",
															"",
															"pm.test(\"Text message should contain 'On update executed'\", function () {",
															"    const response = JSON.parse(pm.response.headers.get('sap-messages'));",
															"",
															"    pm.expect(response[0].message).to.contains('On update executed')",
															"",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"views\": 1000,\n    \"averageRating\": 53.333,\n    \"book_ID\": 203\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{bookStatsEntity}}(ID=1)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{bookStatsEntity}}(ID=1)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnDelete",
									"item": [
										{
											"name": "On delete a single entity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete an item should return text 'item deleted'\", function () {",
															"    const response = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(response[0].message).to.contains('Item deleted')",
															"",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"   pm.expect(pm.response.code).to.be.oneOf([204, 201, 200]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{bookStatsEntity}}(ID=1)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{bookStatsEntity}}(ID=1)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnAction",
									"item": [
										{
											"name": "Execute submit order",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test to check if the response headers contain Content-Language header with the value 'DE_de'",
															"pm.test(\"Response headers contain Content-Language header with the value 'DE_de'\", function () {",
															"    pm.expect(pm.response.headers.get('Content-Language')).to.equal('DE_de');",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"book\": 1,\n    \"quantity\" : 3\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/submitOrder",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"submitOrder"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnFunction",
									"item": [
										{
											"name": "On execute a function",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"submitOrder contains a stock = 7\", function () {",
															"    const {stock} = pm.response.json();",
															"    pm.expect(stock).to.eql(7);",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/submitOrderFunction(book=271,quantity=6)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"submitOrderFunction(book=271,quantity=6)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnEvent",
									"item": [
										{
											"name": "OnEvent should not return an error",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"   pm.expect(pm.response.code).to.be.oneOf([204, 201, 200]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnError",
									"item": [
										{
											"name": "Error pop-up",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"This get entity should return 200 and message 'OnError'\", function () {",
															"    const response = pm.response.json();",
															"    pm.expect(response.error.message).to.eql('OnError')",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{publishersEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{publishersEntity}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnBoundAction",
									"item": [
										{
											"name": "On execute a bound action to an entity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returned object should contain 'Jane Eyre', rating : 11 and stats : 4344\", function () {",
															"    const response = pm.response.json();",
															"",
															"    pm.expect(response.book).to.equals(\"Jane Eyre\");",
															"    pm.expect(response.rating).to.equals(11);",
															"    pm.expect(response.stats).to.equals(444233);",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"   pm.expect(pm.response.code).to.be.oneOf([204, 201, 200]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ID\" : 271\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{bookStatsEntity}}(ID=2)/CatalogService.GenerateReport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{bookStatsEntity}}(ID=2)",
														"CatalogService.GenerateReport"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "OnBoundFunction",
									"item": [
										{
											"name": "On execute a bound function on an entity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returned object should contain value : true\", function () {",
															"    const response = pm.response.json();",
															"",
															"    pm.expect(response.value).to.equals(true);",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"   pm.expect(pm.response.code).to.be.oneOf([204, 201, 200]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{bookStatsEntity}}(ID=1)/CatalogService.NotifyAuthor(ID=107)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{bookStatsEntity}}(ID=1)",
														"CatalogService.NotifyAuthor(ID=107)"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "The `On` phase is started after the `Before` phase, as long as no return value is yet provided and no exception occurred. It's meant to implement the core processing of the event. There can be an arbitrary number of `On` handlers per event, although as soon as the first `On` handler successfully completes the event processing, all remaining `On` handlers are skipped.\n\nThe `On` phase is completed when one of the following conditions applies:\n\n- A handler [completes the event processing](https://cap.cloud.sap/docs/java/provisioning-api#eventcompletion) by setting a result value or setting the state of an event to completed. In this case, any remaining registered `On` handlers are skipped and execution continues with the `After` phase.\n    \n- A handler throws an exception. In this case, event processing is terminated immediately.\n    \n\nIn case of synchronous events, if after the `On` phase, no handler completed the event processing, it's considered an error and the event processing is aborted with an exception. However when registering an `On` handler for an asynchronous event it is not recommended to complete the event processing, as other handlers might not get notified of the event anymore. In that case CAP ensures to auto-complete the event, once all `On` handlers have been executed."
						}
					]
				},
				{
					"name": "Draft entity",
					"item": [
						{
							"name": "Before",
							"item": [
								{
									"name": "@BeforeNewDraft",
									"item": [
										{
											"name": "Before new draft should contain, header message 'Before new draft executed'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returned object is created & headers contains text 'Before new draft executed'\", function () {",
															"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(headers[0].message).to.contains('Before new draft executed')",
															"    ",
															"    const response = pm.response.json();",
															"    const UUIDValue = response.ID",
															"    ",
															"    pm.environment.set(\"draftUUIDInstance\", UUIDValue);",
															"});",
															"",
															"pm.test(\"Response contains IsActiveEntity: false\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData.IsActiveEntity).to.eql(false);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"actionType\": \"Merge\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{adminService}}/{{userActivityLogEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{adminService}}",
														"{{userActivityLogEntity}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@BeforeSaveDraft",
									"item": [
										{
											"name": "Before save draft should contain, header message 'Before save draft executed'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Headers contains text 'Before save draft executed'\", function () {",
															"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    headers.forEach((item) => {",
															"        if(item.message === 'Before save draft executed') {",
															"            pm.expect(item.message).to.contains('Before save draft executed')",
															"        }",
															"    })",
															"});",
															"",
															"pm.test(\"Response contains IsActiveEntity: true, which means the draft was activated\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData.IsActiveEntity).to.eql(true);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{adminService}}/{{userActivityLogEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)/AdminService.draftActivate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{adminService}}",
														"{{userActivityLogEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)",
														"AdminService.draftActivate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@BeforeEditDraft",
									"item": [
										{
											"name": "Before edit a draft should contain, header with 'Before edit draft executed'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Headers contains text 'Before edit draft executed\", function () {",
															"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(headers[0].message).to.contains('Before edit draft executed')",
															"});",
															"",
															"pm.test(\"Response contains HasActiveEntity: true, meaning that active entity is again a draft\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData.HasActiveEntity).to.eql(true);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{adminService}}/{{userActivityLogEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=true)/AdminService.draftEdit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{adminService}}",
														"{{userActivityLogEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=true)",
														"AdminService.draftEdit"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@BeforeDeleteDraft",
									"item": [
										{
											"name": "Before delete a draft should return 204 status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{adminService}}/{{userActivityLogEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{adminService}}",
														"{{userActivityLogEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "After",
							"item": [
								{
									"name": "@AfterNewDraft",
									"item": [
										{
											"name": "After a new draft is created header should contain 'After new draft executed'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returned object is created & headers contains text 'After new draft executed'\", function () {",
															"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(headers[0].message).to.contains('After new draft executed')",
															"",
															"    const response = pm.response.json();",
															"    const UUIDValue = response.ID",
															"    ",
															"    pm.environment.set(\"draftUUIDInstance\", UUIDValue);",
															"});",
															"",
															"pm.test(\"Response contains IsActiveEntity: false\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData.IsActiveEntity).to.eql(false);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Summer Sale\",\n    \"description\": \"Get amazing discounts on selected books during the summer season.\",\n    \"startDate\": \"2023-06-01\",\n    \"endDate\": \"2023-08-31\",\n    \"discount\": 0.25 // 25% discount\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{adminService}}/{{promotionsEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{adminService}}",
														"{{promotionsEntity}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@AfterSaveDraft",
									"item": [
										{
											"name": "After a new draft is created, header should contain 'After save draft executed'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Headers contains text 'After save draft executed'\", function () {",
															"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    headers.forEach((item) => {",
															"        if(item.message === 'After save draft executed') {",
															"            pm.expect(item.message).to.contains('After save draft executed')",
															"        }",
															"    })",
															"});",
															"",
															"pm.test(\"Response contains IsActiveEntity: true, which means the draft was activated\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData.IsActiveEntity).to.eql(true);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{adminService}}/{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)/AdminService.draftActivate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{adminService}}",
														"{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)",
														"AdminService.draftActivate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@AfterEditDraft",
									"item": [
										{
											"name": "After a draft is edited, header should contain 'After edit draft executed'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Headers contains text 'After edit draft executed'\", function () {",
															"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
															"    pm.expect(headers[0].message).to.contains('After edit draft executed')",
															"});",
															"",
															"pm.test(\"Response contains HasActiveEntity: true, meaning that active entity is again a draft\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData.HasActiveEntity).to.eql(true);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{adminService}}/{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=true)/AdminService.draftEdit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{adminService}}",
														"{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=true)",
														"AdminService.draftEdit"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@AfterDeleteDraft",
									"item": [
										{
											"name": "After delete a draft, should return 204 status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{adminService}}/{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{adminService}}",
														"{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "On",
							"item": [
								{
									"name": "@OnNewDraft",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returned object is created & headers contains text 'On new draft'\", function () {",
													"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
													"    pm.expect(headers[0].message).to.contains('On new draft')",
													"",
													"    const response = pm.response.json();",
													"    const UUIDValue = response.ID",
													"    ",
													"    pm.environment.set(\"draftUUIDInstance\", UUIDValue);",
													"});",
													"",
													"pm.test(\"Response contains IsActiveEntity: false\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.IsActiveEntity).to.eql(false);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\" : \"Empire strikes again, volume III\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{bookEventsEntity}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{bookEventsEntity}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "@OnSaveDraft",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Headers contains text 'On save draft'\", function () {",
													"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
													"    headers.forEach((item) => {",
													"        if(item.message === 'On save draft') {",
													"            pm.expect(item.message).to.contains('On save draft')",
													"        }",
													"    })",
													"});",
													"",
													"pm.test(\"Response contains IsActiveEntity: true, which means the draft was activated\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.IsActiveEntity).to.eql(true);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{bookEventsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)/CatalogService.draftActivate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{bookEventsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)",
												"CatalogService.draftActivate"
											]
										}
									},
									"response": []
								},
								{
									"name": "@OnEditDraft",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Headers contains text 'On edit draft'\", function () {",
													"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
													"    pm.expect(headers[0].message).to.contains('On edit draft')",
													"});",
													"",
													"pm.test(\"Response contains HasActiveEntity: true, meaning that active entity is again a draft\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.HasActiveEntity).to.eql(true);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{bookEventsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=true)/CatalogService.draftEdit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{bookEventsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=true)",
												"CatalogService.draftEdit"
											]
										}
									},
									"response": []
								},
								{
									"name": "@OnCancelDraft",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{bookEventsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{bookEventsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Lean draft is a new approach which makes it easier to differentiate between drafts and active instances in your code. This new architecture drastically reduces the complexity and enables more features like storing active instances in remote systems while keeping the corresponding drafts in the local persistence."
				},
				{
					"name": "Parameter",
					"item": [
						{
							"name": "@SingleInstanceSwitch",
							"item": [
								{
									"name": "@SingleInstanceSwitch - Single instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Headers contains text 'Single instance'\", function () {",
													"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
													"",
													"    headers.forEach((header) => {",
													"        if(header.message === 'Single instance') {",
													"            pm.expect(header.message).to.contains('Single instance')",
													"        }",
													"    })",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{manager}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{manager}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}(ID=1)",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{bookSalesEntity}}(ID=1)"
											]
										}
									},
									"response": []
								},
								{
									"name": "@SingleInstanceSwitch - Entity set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Headers contains text 'Entity set'\", function () {",
													"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
													"",
													"    headers.forEach((header) => {",
													"        if(header.message === 'Entity set') {",
													"            pm.expect(header.message).to.contains('Entity set')",
													"        }",
													"    })",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{user}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{user}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{bookSalesEntity}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "@Req",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{user}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "@Res - TODO",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "@Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results should have more than 1 item\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.value.length).greaterThan(1)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{user}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "@Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{user}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ID\": 3,\n    \"saleDate\": \"2024-03-06\",\n    \"saleAmount\": 6,\n    \"quantity\": 55,\n    \"book_ID\": 251,\n    \"customer_ID\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "@IsColumnSupplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Headers sap-messages should contain message 'true'\", function () {",
											"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
											"",
											"    headers.forEach((header) => {",
											"        if(header.message === 'true') {",
											"            pm.expect(header.message).to.contains('true')",
											"        }",
											"    })",
											"});",
											"",
											"// Test for the existence of the saleDate and quantity properties in the response",
											"pm.test(\"Response contains 'saleDate' and 'quantity' properties\", function () {",
											"    const responseData = pm.response.json().value;",
											"",
											"    responseData.forEach((data) => {",
											"        pm.expect(data).to.have.property('saleDate');",
											"        pm.expect(data).to.have.property('quantity');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{user}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}?$filter=saleAmount gt 4&$select=saleDate,quantity",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									],
									"query": [
										{
											"key": "$filter",
											"value": "saleAmount gt 4"
										},
										{
											"key": "$select",
											"value": "saleDate,quantity"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "@IsPresent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Headers sap-messages should contain message 'true'\", function () {",
											"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
											"",
											"    headers.forEach((header) => {",
											"        if(header.message === 'true') {",
											"            pm.expect(header.message).to.contains('true')",
											"        }",
											"    })",
											"});",
											"",
											"// Test for the existence of the saleDate and quantity properties in the response",
											"pm.test(\"Response contains 'saleDate' and 'quantity' properties\", function () {",
											"    const responseData = pm.response.json().value;",
											"",
											"    responseData.forEach((data) => {",
											"        pm.expect(data).to.have.property('saleDate');",
											"        pm.expect(data).to.have.property('quantity');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{user}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}?$filter=saleAmount gt 4&$select=saleDate,quantity",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									],
									"query": [
										{
											"key": "$filter",
											"value": "saleAmount gt 4"
										},
										{
											"key": "$select",
											"value": "saleDate,quantity"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "@IsRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test to loop over sap-messages array and check the message property",
											"pm.test(\"Each sap-message contains the word 'Manager' in the message property\", function () {",
											"    pm.response.json().value.forEach(function(sale) {",
											"        if (sale.hasOwnProperty('sap-messages')) {",
											"            sale['sap-messages'].forEach(function(message) {",
											"                pm.expect(message.message).to.include('Manager');",
											"            });",
											"        }",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{manager}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{manager}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "@GetQueryProperty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Check for the presence of sap-messages header",
											"pm.test(\"Valid sap-messages header is present\", function () {",
											"    pm.expect(pm.response.headers.has('sap-messages')).to.be.true;",
											"});",
											"",
											"// Check for the presence of orderBy header",
											"pm.test(\"Valid orderBy header is present\", function () {",
											"    var sapMessages = pm.response.headers.get('sap-messages');",
											"    pm.expect(sapMessages).to.include('orderBy');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{user}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "@GetRequestProperty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Check for the presence of locale header",
											"pm.test(\"Valid locale header is present\", function () {",
											"    var sapMessages = pm.response.headers.get('sap-messages');",
											"    pm.expect(sapMessages).to.include('locale');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{user}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookSalesEntity}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Middleware",
					"item": [
						{
							"name": "Entity Middleware was executed and the request contains status 200 and message 'Middleware2'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Headers contains text 'Middleware2'\", function () {",
											"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
											"",
											"     headers.forEach((header) => {",
											"        if(header.message === 'Middleware2') {",
											"            pm.expect(header.message).to.contains('Middleware2')",
											"        }",
											"    })",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookOrdersEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookOrdersEntity}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Method Middleware was executed and the request contains status 200 and message 'MiddlewareAfterRead2'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Headers contains text 'MiddlewareAfterRead2'\", function () {",
											"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
											"",
											"     headers.forEach((header) => {",
											"        if(header.message === 'MiddlewareAfterRead2') {",
											"            pm.expect(header.message).to.contains('MiddlewareAfterRead2')",
											"        }",
											"    })",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookOrdersEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookOrdersEntity}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Helpers",
					"item": [
						{
							"name": "@FieldsFormatter",
							"item": [
								{
									"name": "After",
									"item": [
										{
											"name": "@AfterRead",
											"item": [
												{
													"name": "Format fields with 'customFormatter'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"First item in the response array has format 'e-kindle'\", function () {",
																	"    const response = pm.response.json();",
																	"    const firstItem = response.value[0];",
																	"    pm.expect(firstItem.format).to.eql('e-kindle');",
																	"});",
																	"",
																	"pm.test(\"Rest of the items in the response array are in uppercase\", function () {",
																	"    const response = pm.response.json();",
																	"    response.value.slice(1).forEach((item) => {",
																	"        pm.expect(item.format).to.eql(item.format.toUpperCase());",
																	"    });",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookFormatsEntity}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookFormatsEntity}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Before",
									"item": [
										{
											"name": "@BeforeCreate",
											"item": [
												{
													"name": "Blacklist letters 'le' from POST body 'format' field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response should contain property 'format' with value 'epub'\", function () {",
																	"    const response = pm.response.json();",
																	"    pm.expect(response.format).to.eql('epub');",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ID\": 5,\n    \"format\": \"EPUBle\",\n    \"price\": 30,\n    \"pages\": 450,\n    \"language\": \"BE\",\n    \"publicationDate\": \"2023-01-01\",\n    \"book_ID\": 252\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookFormatsEntity}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookFormatsEntity}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@BeforeUpdate",
											"item": [
												{
													"name": "Truncate body field 'format' after length 7, the result will be 'epub...'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response body object contains property 'format' with value 'epub'\", function () {",
																	"    var response = pm.response.json();",
																	"    pm.expect(response).to.have.property('format', 'epub...');",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"format\": \"EPUBleeeeeeee\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookFormatsEntity}}(ID=2)",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookFormatsEntity}}(ID=2)"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "On",
									"item": [
										{
											"name": "@OnUpdate",
											"item": [
												{
													"name": "Format field 'format'  with 'trim' method when update an item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"format\": \"    MOBI\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookFormatsEntity}}(ID=3)",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookFormatsEntity}}(ID=3)"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@OnCreate",
											"item": [
												{
													"name": "Format field 'language' using 'ltrim' method when a new item is created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response should contain property 'language' trimmed of whitespaces\", function () {",
																	"    const response = pm.response.json();",
																	"    pm.expect(response.language).to.eql(response.language.toUpperCase());",
																	"",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ID\": 4,\n    \"format\": \"PDF\",\n    \"price\": 50,\n    \"pages\": 250,\n    \"language\": \"    NL\",\n    \"publicationDate\": \"2024-01-01\",\n    \"book_ID\": 252\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookFormatsEntity}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookFormatsEntity}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@OnAction",
											"item": [
												{
													"name": "Format field 'language' toLowerCase', 'ltrim'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response should contain property 'language' with 'lowerCase'\", function () {",
																	"    const response = pm.response.json();",
																	"    pm.expect(response.language).to.eql(response.language.toLowerCase());",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"language\": \"    GR\",\n    \"format\": \"PDF\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/changeBookProperties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"changeBookProperties"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "@_**FieldsFormatter**_ will be tested for all events `After`,`Before`, `On`"
						},
						{
							"name": "@Validate",
							"item": [
								{
									"name": "Before",
									"item": [
										{
											"name": "@BeforeCreate",
											"item": [
												{
													"name": "Validate fields - comment - isLowercase",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ID\": 5,\n    \"book_ID\": 201,\n    \"recommended_ID\": 203,\n    \"rating\": 5,\n    \"comment\": \"yeeepp greattt !\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookRecommendationsEntity}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookRecommendationsEntity}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate fields - comment - does not meet the isLowercase constraints",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ID\": 5,\n    \"book_ID\": 201,\n    \"recommended_ID\": 203,\n    \"rating\": 5,\n    \"comment\": \"YEEEEEEE greattt !\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookRecommendationsEntity}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookRecommendationsEntity}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate fields with 'comment' field not in the body request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response should contain property 'comment' with value 'null'\", function () {",
																	"    const response = pm.response.json();",
																	"    pm.expect(response.comment).to.be.null",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ID\": 6,\n    \"book_ID\": 207,\n    \"recommended_ID\": 203,\n    \"rating\": 2\n    // \"comment\": \"BLEAH\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookRecommendationsEntity}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookRecommendationsEntity}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate fields with 'description field in the body for endsWith letter 'N'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ID\": 7,\n    \"book_ID\": 207,\n    \"recommended_ID\": 203,\n    \"rating\": 2,\n    \"comment\": \"bleah\",\n    \"description\": \"This will check if the description endsWith letter 'N' : HAVE A DESCRIPTION\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookRecommendationsEntity}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookRecommendationsEntity}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@BeforeUpdate",
											"item": [
												{
													"name": "Validate fields - comment - startsWith 'COMMENT:'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"comment\": \"COMMENT: this a test for the startsWith method\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookRecommendationsEntity}}(ID=2)",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookRecommendationsEntity}}(ID=2)"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "On",
									"item": [
										{
											"name": "@OnCreate",
											"item": [
												{
													"name": "Validate fields - book_ID - isAlphanumeric 'book_ID'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ID\": 8,\n    \"book_ID\": 201,\n    \"recommended_ID\": 203,\n    \"rating\": 5,\n    \"comment\": \"yeeepp greattt !\",\n    \"description\": \"This will check if the description endsWith letter 'N' : HAVE A DESCRIPTION\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookRecommendationsEntity}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookRecommendationsEntity}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@OnUpdate",
											"item": [
												{
													"name": "Validate fields - comment - isLength to have the min : 5 chars",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"comment\": \"COMMENT: this a test for the isLength method\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/{{bookRecommendationsEntity}}(ID=2)",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"{{bookRecommendationsEntity}}(ID=2)"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@OnAction",
											"item": [
												{
													"name": "Format field 'language' toLowerCase', 'ltrim' Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response should contain property 'language' with 'lowerCase'\", function () {",
																	"    const response = pm.response.json();",
																	"    pm.expect(response.format).to.eql('PDF');",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"language\": \"    GR\",\n    \"format\": \"PDF\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/{{catalogService}}/changeBookProperties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"{{catalogService}}",
																"changeBookProperties"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "_**@Validate**_ will be tested for all events `After`,`Before`, `On`"
						},
						{
							"name": "@ExecutionAllowedForRoles",
							"item": [
								{
									"name": "Allow Manager to execute the method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test to loop over sap-messages array and check the message property",
													"pm.test(\"Each sap-message contains the word 'Manager' in the message property\", function () {",
													"    pm.response.json().value.forEach(function(sale) {",
													"        if (sale.hasOwnProperty('sap-messages')) {",
													"            sale['sap-messages'].forEach(function(message) {",
													"                pm.expect(message.message).to.include('Manager');",
													"            });",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{manager}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{manager}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{bookSalesEntity}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{bookSalesEntity}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "@AfterReadSingleInstance",
							"item": [
								{
									"name": "Entity set : singleInstance logic not executed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to check if the response headers contain Content-Language header with the value 'DE_de'",
													"pm.test(\"Response headers contain Content-Language header with the value 'DE_de'\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Language')).to.equal('DE_de');",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{booksEntity}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Single object : Validate title to contain 10 % discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is a single object and not an array\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object').and.not.an('array');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}(ID=252)",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{catalogService}}",
												"{{booksEntity}}(ID=252)"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "@AfterReadSingleInstanceDraft",
							"item": [
								{
									"name": "Pre-request: Create draft",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returned object is created & headers contains text 'After new draft executed'\", function () {",
													"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
													"    pm.expect(headers[0].message).to.contains('After new draft executed')",
													"",
													"    const response = pm.response.json();",
													"    const UUIDValue = response.ID",
													"    ",
													"    pm.environment.set(\"draftUUIDInstance\", UUIDValue);",
													"});",
													"",
													"pm.test(\"Response contains IsActiveEntity: false\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.IsActiveEntity).to.eql(false);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Summer Spectacular Sale\",\n  \"description\": \"Enjoy fantastic discounts on a wide range of books this summer!\",\n  \"startDate\": \"2023-06-10\",\n  \"endDate\": \"2023-08-20\",\n  \"discount\": 0.3\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{adminService}}/{{promotionsEntity}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{adminService}}",
												"{{promotionsEntity}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "After read draft single instance, the header should contain Content-Language: 'DE_de'",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to check if the response headers contain Content-Language header with the value 'DE_de'",
													"pm.test(\"Response headers contain Content-Language header with the value 'DE_de'\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Language')).to.equal('DE_de');",
													"});",
													"",
													"// Test to verify the response field 'description' contains 'A new description'",
													"pm.test(\"Description field contains 'A new description'\", function () {",
													"    var responseData = pm.response.json();",
													"    pm.expect(responseData.description).to.include('A new description');",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"A new description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{adminService}}/{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{adminService}}",
												"{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "@Prepend",
							"item": [
								{
									"name": "@AfterRead",
									"item": [
										{
											"name": "The response header should contain language 'DE_de'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Test to check if the response headers contain Accept-Language header with the value 'DE_de'",
															"pm.test(\"Response headers contain Accept-Language header with the value 'DE_de'\", function () {",
															"    pm.expect(pm.response.headers.get('Accept-Language')).to.equal('DE_de');",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}(ID=252)",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}(ID=252)"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnAction",
									"item": [
										{
											"name": "Execute submit order",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test to check if the response headers contain Content-Language header with the value 'DE_de'",
															"pm.test(\"Response headers contain Content-Language header with the value 'en'\", function () {",
															"    pm.expect(pm.response.headers.get('Content-Language')).to.equal('DE_de');",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"book\": 1,\n    \"quantity\" : 3\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/submitOrder",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"submitOrder"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "@OnEvent",
									"item": [
										{
											"name": "OnEvent should not return an error and have header language DE_de",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test to check if the response headers contain Content-Language header with the value 'DE_de'",
															"pm.test(\"Response headers contain Content-Language header with the value 'en'\", function () {",
															"    pm.expect(pm.response.headers.get('Content-Language')).to.equal('DE_de');",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"   pm.expect(pm.response.code).to.be.oneOf([204, 201, 200]);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/{{catalogService}}/{{booksEntity}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"{{catalogService}}",
														"{{booksEntity}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "@PrependDraft",
							"item": [
								{
									"name": "Pre-request: Create draft",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returned object is created & headers contains text 'After new draft executed'\", function () {",
													"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
													"    pm.expect(headers[0].message).to.contains('After new draft executed')",
													"",
													"    const response = pm.response.json();",
													"    const UUIDValue = response.ID",
													"    ",
													"    pm.environment.set(\"draftUUIDInstance\", UUIDValue);",
													"});",
													"",
													"pm.test(\"Response contains IsActiveEntity: false\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.IsActiveEntity).to.eql(false);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Back to School Promotion\",\n  \"description\": \"Gear up for the new school year with amazing discounts on textbooks and school supplies!\",\n  \"startDate\": \"2023-08-15\",\n  \"endDate\": \"2023-09-15\",\n  \"discount\": 0.2\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{adminService}}/{{promotionsEntity}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{adminService}}",
												"{{promotionsEntity}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "After read draft single instance, the header should contain Content-Language: 'DE_de' Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to check if the response headers contain Content-Language header with the value 'DE_de'",
													"pm.test(\"Response headers contain Content-Language header with the value 'DE_de'\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Language')).to.equal('DE_de');",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"A new description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{adminService}}/{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{adminService}}",
												"{{promotionsEntity}}(ID={{draftUUIDInstance}},IsActiveEntity=false)"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "All other decorators which are not SAP standard."
				},
				{
					"name": "Integration",
					"item": [
						{
							"name": "Pre-request POST helper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Returned object is created & headers contains text 'On new draft'\", function () {",
											"    const headers = JSON.parse(pm.response.headers.get('sap-messages'));",
											"    pm.expect(headers[0].message).to.contains('On new draft')",
											"",
											"    const response = pm.response.json();",
											"    const UUIDValue = response.ID",
											"    ",
											"    pm.environment.set(\"draftUUIDInstance\", UUIDValue);",
											"});",
											"",
											"pm.test(\"Response contains IsActiveEntity: false\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.IsActiveEntity).to.eql(false);",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"Empire strikes again, volume III\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{catalogService}}/{{bookEventsEntity}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{catalogService}}",
										"{{bookEventsEntity}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Integration between multiple decorators"
				}
			],
			"description": "**Methods** **`.on`**,**`.before, .after`** refer to corresponding _phases_ during request processing:\n\n- **`.on`** handlers actually fulfill requests, e.g. by reading/writing data from/to databases\n- **`.before`** handlers run before the `.on` handlers, frequently for validating inbound data\n- **`.after`** handlers run after the `.on` handlers, frequently to enrich outbound data"
		}
	]
}